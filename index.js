import dotenv from 'dotenv';
import express from 'express';
import bodyParser from 'body-parser';
import { statSync, readFileSync, writeFileSync, promises } from 'fs';
import VkBot from 'node-vk-bot-api';
import PQueue from 'p-queue';
import Handlebars from 'handlebars';

dotenv.config();

const { SECRET, CONFIRMATION, PORT = 8080, VK_TOKEN: TOKEN, VK_GROUP_ID: GROUP_ID, ADMIN_IDS } = process.env;
const ADMIN_LIST = (ADMIN_IDS || '').split(',').map(Number).filter(id => !isNaN(id));

if (!TOKEN || !GROUP_ID || !ADMIN_LIST.length) process.exit(console.error('‚ùå Missing VK_TOKEN, VK_GROUP_ID, ADMIN_IDS'));

const bot = new VkBot({ token: TOKEN, group_id: Number(GROUP_ID), api: { v: '5.199' }, confirmation: CONFIRMATION, secret: SECRET });
const queue = new PQueue({ intervalCap: 30, interval: 1000 });
const cache = { blocklist: { data: null, lastModified: 0 }, allowlist: { data: null, lastModified: 0 } };

const isAdmin = userId => ADMIN_LIST.includes(userId);
const loadList = (file, key) => {
  try {
    const stats = statSync(file);
    if (cache[key].data && cache[key].lastModified >= stats.mtime.getTime()) return cache[key].data;
    const data = JSON.parse(readFileSync(file, 'utf-8'));
    cache[key].data = Array.isArray(data) ? data : [];
    cache[key].lastModified = stats.mtime.getTime();
    return cache[key].data;
  } catch (err) {
    cache[key].data = [];
    return cache[key].data;
  }
};
const saveList = (file, key, list) => {
  writeFileSync(file, JSON.stringify(list, null, 2));
  cache[key].data = list;
  cache[key].lastModified = Date.now();
};
const modifyList = (file, key, userId, action) => {
  const list = loadList(file, key);
  const id = String(userId);
  const idx = list.indexOf(id);
  if (action === 'add' && idx === -1) { list.push(id); saveList(file, key, list); return true; }
  if (action === 'remove' && idx > -1) { list.splice(idx, 1); saveList(file, key, list); return true; }
  return false;
};

const loadBlocklist = () => loadList('./blocklist.json', 'blocklist');
const loadAllowlist = () => loadList('./allowlist.json', 'allowlist');
const saveBlocklist = list => saveList('./blocklist.json', 'blocklist', list);
const saveAllowlist = list => saveList('./allowlist.json', 'allowlist', list);
const addToBlocklist = userId => modifyList('./blocklist.json', 'blocklist', userId, 'add');
const removeFromBlocklist = userId => modifyList('./blocklist.json', 'blocklist', userId, 'remove');
const addToAllowlist = userId => modifyList('./allowlist.json', 'allowlist', userId, 'add');
const removeFromAllowlist = userId => modifyList('./allowlist.json', 'allowlist', userId, 'remove');

const filterUsers = users => {
  const allowlist = loadAllowlist();
  const blocklist = new Set(loadBlocklist());
  const allowSet = new Set(allowlist);
  return users.filter(user => {
    const id = String(user.id);
    return (allowlist.length === 0 || allowSet.has(id)) && !blocklist.has(id);
  });
};

const sendMessage = async (peer_id, text, keyboard) => bot.api('messages.send', {
  peer_id, message: text, 
  attachment: (process.env.ATTACHMENTS || '').trim() || undefined,
  random_id: peer_id * 100000 + (Date.now() % 100000),
  ...(keyboard && { keyboard: JSON.stringify(keyboard) })
});

async function gatherUserIds(group_id) {
  const members = [];
  let offset = 0;
  const count = 1000;
  let total = null;

  while (true) {
    const data = await queue.add(() => bot.api('groups.getMembers', {
      group_id, offset, count, fields: 'first_name,last_name'
    }));

    if (total === null) total = data.count;
    members.push(...data.items);
    offset += count;
    console.log(`üìä –°–æ–±—Ä–∞–Ω–æ ${members.length}/${total} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...`);
    if (offset >= total) break;
  }

  await promises.writeFile('./peer_list.json', JSON.stringify(members, null, 4));
  return members;
}

async function broadcast(messageTemplate, userObjects, dryRun = false) {
  const template = Handlebars.compile(messageTemplate);
  const filteredUsers = filterUsers(userObjects);
  const filteredCount = userObjects.length - filteredUsers.length;
  
  if (filteredCount > 0) {
    const allowlist = loadAllowlist();
    if (allowlist.length > 0) {
      console.log(`üéØ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω: ${filteredUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${filteredCount} –∏—Å–∫–ª—é—á–µ–Ω–æ)`);
    } else {
      console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ ${filteredCount} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }
  }

  let processed = 0;
  const total = filteredUsers.length;

  for (const user of filteredUsers) {
    const personalizedMessage = template({
      first_name: user.first_name || '',
      last_name: user.last_name || '',
      id: user.id,
    });

    queue.add(async () => {
      try {
        if (dryRun) {
          console.log(`[DRY RUN] –û—Ç–ø—Ä–∞–≤–∫–∞ ${user.id}: "${personalizedMessage}"`);
        } else {
          await sendMessage(user.id, personalizedMessage);
        }
        processed++;
        if (processed % 10 === 0 || processed === total) {
          console.log(`üì§ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${processed}/${total} —Å–æ–æ–±—â–µ–Ω–∏–π ${dryRun ? '—Å–∏–º—É–ª–∏—Ä—É–µ—Ç—Å—è' : '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}`);
        }
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ${user.id}:`, err);
        if (err.code === 429 && err.data?.parameters?.retry_after && !dryRun) {
          await new Promise(r => setTimeout(r, err.data.parameters.retry_after * 1000));
          return sendMessage(user.id, personalizedMessage);
        }
      }
    });
  }
  await queue.onIdle();
}

const createKeyboard = () => ({
  one_time: false,
  buttons: [
    [
      { action: { type: "text", label: "üìä –°–æ–±—Ä–∞—Ç—å ID" }, color: "primary" },
      { action: { type: "text", label: "üîç –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" }, color: "secondary" }
    ],
    [
      { action: { type: "text", label: "üì° –†–∞—Å—Å—ã–ª–∫–∞" }, color: "positive" },
      { action: { type: "text", label: "ÔøΩ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫" }, color: "secondary" }
    ],
    [
      { action: { type: "text", label: "üìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫" }, color: "secondary" },
      { action: { type: "text", label: "‚ùì –ü–æ–º–æ—â—å" }, color: "secondary" }
    ]
  ]
});

// Command handlers
const commands = {
  async gatherIds(ctx) {
    const keyboard = createKeyboard();
    await sendMessage(ctx.message.peer_id, '‚è≥ –°–æ–±–∏—Ä–∞–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞‚Ä¶', keyboard);
    try {
      const members = await gatherUserIds(GROUP_ID);
      await sendMessage(ctx.message.peer_id, `‚úÖ –°–æ–±—Ä–∞–Ω–æ ${members.length} ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`, keyboard);
    } catch (err) {
      console.error(err);
      await sendMessage(ctx.message.peer_id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.', keyboard);
    }
  },

  async testBroadcast(ctx) {
    const keyboard = createKeyboard();
    await sendMessage(ctx.message.peer_id, 'üîç –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)‚Ä¶', keyboard);

    try {
      const users = await gatherUserIds(GROUP_ID);
      
      let templateContent;
      try {
        templateContent = readFileSync('./broadcast_template.txt', 'utf-8').trim();
      } catch (err) {
        return sendMessage(ctx.message.peer_id, '‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª broadcast_template.txt.', keyboard);
      }
      
      if (!templateContent) return sendMessage(ctx.message.peer_id, '‚ùó –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –ø—É—Å—Ç.', keyboard);

      const filteredUsers = filterUsers(users);
      const blockedCount = users.length - filteredUsers.length;
      if (blockedCount > 0) {
        await sendMessage(ctx.message.peer_id, `ÔøΩ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å ${filteredUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (${blockedCount} –∏—Å–∫–ª—é—á–µ–Ω–æ)`, keyboard);
      }

      await broadcast(templateContent, users, true);
      await sendMessage(ctx.message.peer_id, '‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å).', keyboard);
    } catch (err) {
      console.error(err);
      await sendMessage(ctx.message.peer_id, '‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ' + err.message, keyboard);
    }
  },

  async broadcast(ctx) {
    const keyboard = createKeyboard();
    await sendMessage(ctx.message.peer_id, 'üì° –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π‚Ä¶', keyboard);

    try {
      const users = await gatherUserIds(GROUP_ID);
      
      let templateContent;
      try {
        templateContent = readFileSync('./broadcast_template.txt', 'utf-8').trim();
      } catch (err) {
        return sendMessage(ctx.message.peer_id, '‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª broadcast_template.txt.', keyboard);
      }
      
      if (!templateContent) return sendMessage(ctx.message.peer_id, '‚ùó –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –ø—É—Å—Ç.', keyboard);

      const filteredUsers = filterUsers(users);
      const blockedCount = users.length - filteredUsers.length;
      
      const statusMessage = blockedCount > 0 
        ? `üì¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${filteredUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (${blockedCount} –∏—Å–∫–ª—é—á–µ–Ω–æ)`
        : `üì¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${filteredUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`;
      
      await sendMessage(ctx.message.peer_id, statusMessage, keyboard);
      await broadcast(templateContent, users);
      await sendMessage(ctx.message.peer_id, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', keyboard);
    } catch (err) {
      console.error(err);
      await sendMessage(ctx.message.peer_id, '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ' + err.message, keyboard);
    }
  },

  async showList(ctx, listType) {
    const keyboard = createKeyboard();
    const list = listType === 'blocklist' ? loadBlocklist() : loadAllowlist();
    const listName = listType === 'blocklist' ? '–ß—ë—Ä–Ω—ã–π' : '–ë–µ–ª—ã–π';
    const emptyMessage = listType === 'blocklist' 
      ? 'üìã –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.' 
      : 'üìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∫—Ä–æ–º–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö).';
    
    if (list.length === 0) {
      return sendMessage(ctx.message.peer_id, emptyMessage, keyboard);
    }

    const listText = list.map((userId, index) => `${index + 1}. ${userId}`).join('\n');
    await sendMessage(ctx.message.peer_id, `üìã ${listName} —Å–ø–∏—Å–æ–∫ (${list.length}):\n${listText}`, keyboard);
  },

  async help(ctx) {
    const helpText = `ü§ñ –ö–æ–º–∞–Ω–¥—ã VK –±–æ—Ç–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:

üìä /—Å–æ–±—Ä–∞—Ç—å_–∞–π–¥–∏ - –°–æ–±—Ä–∞—Ç—å ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
üîç /—Ç–µ—Å—Ç_—Ä–∞—Å—Å—ã–ª–∫–∏ - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
üì° /—Ä–∞—Å—Å—ã–ª–∫–∞ - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
üìã /–ø–æ–∫–∞–∑–∞—Ç—å_—á—ë—Ä–Ω—ã–π_—Å–ø–∏—Å–æ–∫ - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üìã /–ø–æ–∫–∞–∑–∞—Ç—å_–±–µ–ª—ã–π_—Å–ø–∏—Å–æ–∫ - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üóëÔ∏è /–æ—á–∏—Å—Ç–∏—Ç—å_—á—ë—Ä–Ω—ã–π_—Å–ø–∏—Å–æ–∫ - –û—á–∏—Å—Ç–∏—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
üóëÔ∏è /–æ—á–∏—Å—Ç–∏—Ç—å_–±–µ–ª—ã–π_—Å–ø–∏—Å–æ–∫ - –û—á–∏—Å—Ç–∏—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
üö´ /–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å <id> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚úÖ /—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å <id> - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚úÖ /—Ä–∞–∑—Ä–µ—à–∏—Ç—å <id> - –î–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
‚ùå /–∑–∞–ø—Ä–µ—Ç–∏—Ç—å <id> - –£–±—Ä–∞—Ç—å –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞: {{first_name}}, {{last_name}}, {{id}}`;

    await sendMessage(ctx.message.peer_id, helpText, createKeyboard());
  }
};

// Bot handlers  
bot.use(async (ctx, next) => { try { await next(); } catch (err) { console.error('Bot error:', err); } });

bot.command('/–Ω–∞—á–∞—Ç—å', async ctx => {
  if (!isAdmin(ctx.message.from_id)) {
    return ctx.reply(`‚ö†Ô∏è –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º: ${ADMIN_LIST.map(id => `[id${id}|–ê–¥–º–∏–Ω]`).join(', ')}`);
  }
  await sendMessage(ctx.message.peer_id, 'ü§ñ VK –ë–æ—Ç –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:', createKeyboard());
});

// Command mapping
const commandMap = {
  '/–ø–æ–º–æ—â—å': () => commands.help, '/—Å–æ–±—Ä–∞—Ç—å_–∞–π–¥–∏': () => commands.gatherIds, '/—Ä–∞—Å—Å—ã–ª–∫–∞': () => commands.broadcast,
  '/—Ç–µ—Å—Ç_—Ä–∞—Å—Å—ã–ª–∫–∏': () => commands.testBroadcast, '/–ø–æ–∫–∞–∑–∞—Ç—å_—á—ë—Ä–Ω—ã–π_—Å–ø–∏—Å–æ–∫': () => commands.showList,
  '/–ø–æ–∫–∞–∑–∞—Ç—å_–±–µ–ª—ã–π_—Å–ø–∏—Å–æ–∫': () => commands.showList, 'üìä –°–æ–±—Ä–∞—Ç—å ID': () => commands.gatherIds,
  'üîç –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏': () => commands.testBroadcast, 'üì° –†–∞—Å—Å—ã–ª–∫–∞': () => commands.broadcast,
  'üìã –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫': () => commands.showList, 'üìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫': () => commands.showList, '‚ùì –ü–æ–º–æ—â—å': () => commands.help
};

Object.keys(commandMap).forEach(cmd => {
  if (cmd.startsWith('/')) {
    bot.command(cmd, async ctx => {
      if (!isAdmin(ctx.message.from_id)) return ctx.reply('‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
      const handler = commandMap[cmd]();
      if (cmd.includes('–±–µ–ª—ã–π')) await handler(ctx, 'allowlist');
      else if (cmd.includes('—á—ë—Ä–Ω—ã–π')) await handler(ctx, 'blocklist');
      else await handler(ctx);
    });
  }
});

// List management
[
  { cmd: '/–æ—á–∏—Å—Ç–∏—Ç—å_—á—ë—Ä–Ω—ã–π_—Å–ø–∏—Å–æ–∫', action: () => saveBlocklist([]), msg: 'üóëÔ∏è –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.' },
  { cmd: '/–æ—á–∏—Å—Ç–∏—Ç—å_–±–µ–ª—ã–π_—Å–ø–∏—Å–æ–∫', action: () => saveAllowlist([]), msg: 'üóëÔ∏è –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.' },
  { cmd: '/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', action: addToBlocklist, success: 'üö´ –î–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.', exists: '‚ö†Ô∏è –£–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.' },
  { cmd: '/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', action: removeFromBlocklist, success: '‚úÖ –£–±—Ä–∞–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.', exists: '‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.' },
  { cmd: '/—Ä–∞–∑—Ä–µ—à–∏—Ç—å', action: addToAllowlist, success: '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.', exists: '‚ö†Ô∏è –£–∂–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.' },
  { cmd: '/–∑–∞–ø—Ä–µ—Ç–∏—Ç—å', action: removeFromAllowlist, success: '‚úÖ –£–±—Ä–∞–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.', exists: '‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.' }
].forEach(({ cmd, action, msg, success, exists }) => {
  bot.command(cmd, async ctx => {
    if (!isAdmin(ctx.message.from_id)) return ctx.reply('‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
    const keyboard = createKeyboard();
    if (msg) { action(); return sendMessage(ctx.message.peer_id, msg, keyboard); }
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 1) return sendMessage(ctx.message.peer_id, `‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${cmd} <id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>`, keyboard);
    try {
      const result = action(args[0]);
      await sendMessage(ctx.message.peer_id, result ? success : exists, keyboard);
    } catch (err) {
      await sendMessage(ctx.message.peer_id, `‚ùå –û—à–∏–±–∫–∞: ${err.message}`, keyboard);
    }
  });
});

bot.on('message', async ctx => {
  if (!isAdmin(ctx.message.from_id)) {
    if (ctx.message.text && !ctx.message.text.startsWith('/')) {
      const senderInfo = `[id${ctx.message.from_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.message.from_id}]`;
      const forwardMessage = `üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${senderInfo}:\n\n"${ctx.message.text}"`;
      for (const adminId of ADMIN_LIST) {
        try { await sendMessage(adminId, forwardMessage); } catch (err) { console.error(`Failed to forward to ${adminId}:`, err); }
      }
      return ctx.reply(`‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: ${ADMIN_LIST.map(id => `[id${id}|–ê–¥–º–∏–Ω]`).join(', ')}`);
    }
    return;
  }
  const text = ctx.message.text?.trim();
  if (text && commandMap[text]) {
    const handler = commandMap[text]();
    if (text.includes('–ë–µ–ª—ã–π')) await handler(ctx, 'allowlist');
    else if (text.includes('–ß—ë—Ä–Ω—ã–π')) await handler(ctx, 'blocklist');
    else await handler(ctx);
  }
});

console.log('üîó –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
const app = express();
app.use(bodyParser.json());
app.post('/', bot.webhookCallback);
app.listen(PORT);